package com.qferiz.qferiztrafficinfo.fragments;


import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import com.android.volley.AuthFailureError;
import com.android.volley.NetworkError;
import com.android.volley.NoConnectionError;
import com.android.volley.ParseError;
import com.android.volley.ServerError;
import com.android.volley.TimeoutError;
import com.android.volley.VolleyError;
import com.qferiz.qferiztrafficinfo.R;
import com.qferiz.qferiztrafficinfo.adapters.AdapterMovies;
import com.qferiz.qferiztrafficinfo.callbacks.BoxOfficeMoviesLoadedListener;
import com.qferiz.qferiztrafficinfo.database.MoviesDatabase;
import com.qferiz.qferiztrafficinfo.extras.Movie;
import com.qferiz.qferiztrafficinfo.extras.MovieSorter;
import com.qferiz.qferiztrafficinfo.extras.MyApplication;
import com.qferiz.qferiztrafficinfo.extras.SortListener;
import com.qferiz.qferiztrafficinfo.logging.L;
import com.qferiz.qferiztrafficinfo.task.TaskLoadMoviesBoxOffice;

import java.util.ArrayList;

/**
 * A simple {@link Fragment} subclass.
 * Use the {@link FragmentBoxOffice#newInstance} factory method to
 * create an instance of this fragment.
 */
public class FragmentBoxOffice extends Fragment implements SortListener, BoxOfficeMoviesLoadedListener, SwipeRefreshLayout.OnRefreshListener {
    // TODO: Rename parameter arguments, choose names that match
    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
    //private static final String ARG_PARAM1 = "param1";
    //private static final String ARG_PARAM2 = "param2";

    //The key used to store arraylist of movie objects to and from parcelable
    private static final String STATE_MOVIES = "state_movies";

    //the arraylist containing our list of box office his
    private ArrayList<Movie> mListMovies = new ArrayList<>();

    //the adapter responsible for displaying our movies within a RecyclerView
    private AdapterMovies mAdapter;

    private SwipeRefreshLayout mSwipeRefreshLayout;

    //the recyclerview containing showing all our movies
    private RecyclerView mRecyclerMovies;

    //the TextView containing error messages generated by Volley
    private TextView mTextError;

    //the sorter responsible for sorting our movie results based on choice made by the user in the FAB
    private MovieSorter mSorter = new MovieSorter();


    public FragmentBoxOffice() {
        // Required empty public constructor
    }

    public void onMoviesLoaded() {

    }

    /**
     * Use this factory method to create a new instance of
     * this fragment using the provided parameters.
     *
     * @param param1 Parameter 1.
     * @param param2 Parameter 2.
     * @return A new instance of fragment FragmentBoxOffice.
     */
    // TODO: Rename and change types and number of parameters
    public static FragmentBoxOffice newInstance(String param1, String param2) {
        FragmentBoxOffice fragment = new FragmentBoxOffice();
        Bundle args = new Bundle();
//        args.putString(ARG_PARAM1, param1);
//        args.putString(ARG_PARAM2, param2);
        //put any extra arguments that you may want to supply to this fragment
        fragment.setArguments(args);
        return fragment;
    }

//    @Override
//    public void onCreate(Bundle savedInstanceState) {
//        super.onCreate(savedInstanceState);
//        if (getArguments() != null) {
//            mParam1 = getArguments().getString(ARG_PARAM1);
//            mParam2 = getArguments().getString(ARG_PARAM2);
//        }
//    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {

        // Inflate the layout for this fragment
        View mView = inflater.inflate(R.layout.fragment_box_office, container, false);
        mTextError = (TextView) mView.findViewById(R.id.textVolleyError);

        // SwipeRefreshLayout Animation Gesture
        mSwipeRefreshLayout = (SwipeRefreshLayout) mView.findViewById(R.id.swipeMovieHits);
//        mSwipeRefreshLayout.setColorSchemeColors(Color.BLUE, Color.RED, Color.MAGENTA, Color.GREEN);
        mSwipeRefreshLayout.setColorSchemeResources(R.color.colorPrimary, R.color.colorAccent, R.color.colorAnimateSwipe1, R.color.colorAnimateSwipe2);
        mSwipeRefreshLayout.setOnRefreshListener(this);

        // RecyclerView
        mRecyclerMovies = (RecyclerView) mView.findViewById(R.id.listMoviesHits);
        //set the layout manager before trying to display data
        mRecyclerMovies.setLayoutManager(new LinearLayoutManager(getActivity()));
        mAdapter = new AdapterMovies(getActivity());
        mRecyclerMovies.setAdapter(mAdapter);
        if (savedInstanceState != null) {
            //if this fragment starts after a rotation or configuration change, load the existing movies from a parcelable
            mListMovies = savedInstanceState.getParcelableArrayList(STATE_MOVIES);
//            mAdapter.setMovies(mListMovies);
        } else {
            //if this fragment starts for the first time, load the list of movies from a database
//            sendJsonRequest();
            mListMovies = MyApplication.getWritableDatabase().readMovies(MoviesDatabase.BOX_OFFICE);
            //if the database is empty, trigger an AsycnTask to download movie list from the web
            if (mListMovies.isEmpty()) {
                L.m("FragmentBoxOffice: executing task from fragment");
                new TaskLoadMoviesBoxOffice(this).execute();
            }
        }

        //update your Adapter to containg the retrieved movies
        mAdapter.setMovies(mListMovies);
        return mView;

        //return inflater.inflate(R.layout.fragment_box_office, container, false);
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        //save the movie list to a parcelable prior to rotation or configuration change
        outState.putParcelableArrayList(STATE_MOVIES, mListMovies);
    }

    private void handleVolleyError(VolleyError error) {
        //if any error occurs in the network operations, show the TextView that contains the error message
        mTextError.setVisibility(View.VISIBLE);
        if (error instanceof TimeoutError || error instanceof NoConnectionError) {
            mTextError.setText(R.string.error_timeout);

        } else if (error instanceof AuthFailureError) {
            //TODO:
            mTextError.setText(R.string.error_auth_failure);

        } else if (error instanceof ServerError) {
            //TODO:
            mTextError.setText(R.string.error_auth_failure);

        } else if (error instanceof NetworkError) {
            //TODO:
            mTextError.setText(R.string.error_network);

        } else if (error instanceof ParseError) {
            //TODO:
            mTextError.setText(R.string.error_parser);

        }
    }


    /**
     * Called when the user chooses to sort results by name through the menu displayed inside FAB
     */
    @Override
    public void onSortByName() {
        //L.t(getActivity(),"Sort name Box Office");
        mSorter.sortMoviesByName(mListMovies);
        mAdapter.notifyDataSetChanged();

    }

    /**
     * Called when the user chooses to sort results by date through the menu displayed inside FAB
     */
    @Override
    public void onSortByDate() {
        //L.t(getActivity(),"Sort Date Box Office");
        mSorter.sortMoviesByDate(mListMovies);
        mAdapter.notifyDataSetChanged();

    }

    /**
     * Called when the user chooses to sort results by rating through the menu displayed inside FAB
     */
    @Override
    public void onSortByRating() {
        //L.t(getActivity(),"Sort Rating Box Office");
        mSorter.sortMoviesByRating(mListMovies);
        mAdapter.notifyDataSetChanged();

    }

    /**
     * Called when the AsyncTask finishes load the list of movies from the web
     */
    @Override
    public void onBoxOfficeMoviesLoaded(ArrayList<Movie> mListMovies) {
        //L.t(getActivity(), "onBoxOfficeMoviesLoaded Fragment");
        L.m("FragmentBoxOffice: onBoxOfficeMoviesLoaded Fragment");
        //update the Adapter to contain the new movies downloaded from the web
        if (mSwipeRefreshLayout.isRefreshing()) {
            mSwipeRefreshLayout.setRefreshing(false);
        }
        mAdapter.setMovies(mListMovies);
    }

    @Override
    public void onRefresh() {
        L.t(getActivity(), "onRefresh");
        //load the whole feed again on refresh, dont try this at home :)
        new TaskLoadMoviesBoxOffice(this).execute();
    }
}
